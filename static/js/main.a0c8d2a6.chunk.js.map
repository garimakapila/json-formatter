{"version":3,"sources":["JsonInput/index.js","Dropdown/index.js","Settings/index.js","App.js","reportWebVitals.js","index.js"],"names":["JsonInput","props","inputText","setInputText","autoFocus","className","value","onChange","e","target","placeholder","Dropdown","option","setOption","options","useState","displayOptions","setDisplayOptions","ClickAwayListener","onClickAway","onClick","style","display","map","optn","index","Settings","formatText","App","spaces","Object","keys","displayError","setDisplayError","unformattedJSON","JSON","parse","formattedJSON","stringify","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAeeA,MAbf,SAAmBC,GAAQ,IACpBC,EAA4BD,EAA5BC,UAAWC,EAAiBF,EAAjBE,aACjB,OACC,0BACCC,WAAS,EACTC,UAAU,aACVC,MAAQJ,EACRK,SAAW,SAAAC,GAAC,OAAIL,EAAaK,EAAEC,OAAOH,QACtCI,YAAY,Q,gECuCAC,MA3Cf,SAAkBV,GAAQ,IACnBW,EAA+BX,EAA/BW,OAAQC,EAAuBZ,EAAvBY,UAAWC,EAAYb,EAAZa,QADD,EAEoBC,oBAAS,GAF7B,mBAElBC,EAFkB,KAEFC,EAFE,KAIxB,OACC,cAACC,EAAA,EAAD,CACCC,YAAc,kBAAMF,GAAkB,IADvC,SAGC,sBAAKZ,UAAU,qBAAf,UACC,sBACCA,UAAU,iBACVe,QAAU,kBAAMH,GAAmBD,IAFpC,UAIC,qBAAKX,UAAU,iBAAf,SACEW,EAAiB,cAAC,IAAD,IAA0B,cAAC,IAAD,MAE3CJ,KAEH,qBAAKP,UAAU,6BAAf,SACC,qBACCgB,MAAO,CAAEC,QAASN,EAAiB,GAAK,QADzC,SAIEF,EAAQS,KAAK,SAACC,EAAMC,GAAP,OACZ,qBACCpB,UAAYO,IAAWY,EAAO,2CAA6C,kBAE3EJ,QAAU,WACTP,EAAUW,GACVP,GAAkB,IALpB,SAQGO,GANIC,gBCbAC,MAhBf,SAAkBzB,GACjB,OACC,sBAAKI,UAAU,oBAAf,UACC,qBAAKA,UAAU,oBAAf,SACC,cAAC,EAAD,eAAeJ,MAEhB,qBACCI,UAAU,gBACVe,QAAUnB,EAAM0B,WAFjB,wB,yBCmFYC,MAtFf,WAEI,IAAIC,EAAS,CACT,eAAgB,EAChB,eAAgB,EAChB,eAAgB,EAChB,eAAgB,EAChB,mBAAoB,MAGpBf,EAAUgB,OAAOC,KAAKF,GAVf,EAauBd,mBAAS,IAbhC,mBAaLb,EAbK,KAaMC,EAbN,OAciBY,mBAHR,gBAXT,mBAcLH,EAdK,KAcGC,EAdH,OAe6BE,oBAAS,GAftC,mBAeLiB,EAfK,KAeSC,EAfT,KAuCX,OACI,sBAAK5B,UAAU,gBAAf,UACI,qBAAKA,UAAU,QAAf,4BAGA,qBAAKA,UAAU,qBAAf,SACI,cAAC,EAAD,CACIO,OAASA,EACTC,UAAYA,EACZC,QAAUA,EACVa,WAtBhB,WACIM,GAAgB,GAChB,IACI,IAAIC,EAAkBC,KAAKC,MAAMlC,GAC7BmC,EAAgBF,KAAKG,UAAUJ,EAAiB,KAAML,EAAOjB,IACjET,EAAakC,GAEjB,MAAOE,GACHN,GAAgB,SAiBhB,sBAAK5B,UAAU,uBAAf,UACI,sBAAKA,UAAU,eAAf,0CAEI,qBACIA,UAAU,UACVe,QAxCpB,WACIa,GAAgB,GAChB9B,EAAa,uDAoCD,wBAOJ,cAAC,EAAD,CACID,UAAYA,EACZC,aAAeA,IAGf6B,GACA,qBACI3B,UAAU,QADd,uDAMJ,sBACIA,UAAU,QACVe,QAtDhB,WACIa,GAAgB,GAChB9B,EAAa,KAkDL,UAII,cAAC,IAAD,CAAmBE,UAAU,eAJjC,mBCpEDmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0c8d2a6.chunk.js","sourcesContent":["import './style.css';\n\nfunction JsonInput(props) {\n\tlet { inputText, setInputText } = props;\n\treturn (\n\t\t<textarea\n\t\t\tautoFocus\n\t\t\tclassName=\"text-input\"\n\t\t\tvalue={ inputText }\n\t\t\tonChange={ e => setInputText(e.target.value) }\n\t\t\tplaceholder='{}'\n\t\t/>\n\t);\n}\n\nexport default JsonInput;\n","import './style.css';\nimport { useState } from 'react';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport { ClickAwayListener } from '@material-ui/core';\n\nfunction Dropdown(props) {\n\tlet { option, setOption, options } = props;\n\tlet [ displayOptions, setDisplayOptions ] = useState(false);\n\n\treturn (\n\t\t<ClickAwayListener \n\t\t\tonClickAway={ () => setDisplayOptions(false) }\n\t\t>\n\t\t\t<div className=\"dropdown-container\">\n\t\t\t\t<div \n\t\t\t\t\tclassName=\"dropdown-value\"\n\t\t\t\t\tonClick={ () => setDisplayOptions(!displayOptions) }\n\t\t\t\t>\n\t\t\t\t\t<div className=\"dropdown-caret\">\n\t\t\t\t\t{ displayOptions ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon /> }\n\t\t\t\t\t</div>\n\t\t\t\t\t{ option }\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dropdown-options-container\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ display: displayOptions ? \"\" : \"none\" }}\n\t\t\t\t\t> \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toptions.map( (optn, index) =>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={ option === optn ? \"dropdown-selected-option dropdown-option\" : \"dropdown-option\" }\n\t\t\t\t\t\t\t\t\tkey={ index }\n\t\t\t\t\t\t\t\t\tonClick={ () => { \n\t\t\t\t\t\t\t\t\t\tsetOption(optn);\n\t\t\t\t\t\t\t\t\t\tsetDisplayOptions(false);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ optn }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ ClickAwayListener>\n\t);\n}\n\nexport default Dropdown;\n","import './style.css';\nimport Dropdown from '../Dropdown/';\n\nfunction Settings(props) {\n\treturn (\n\t\t<div className=\"settings-elements\">\n\t\t\t<div className=\"settings-dropdown\">\n\t\t\t\t<Dropdown { ...props } />\n\t\t\t</div>\n\t\t\t<div \n\t\t\t\tclassName=\"format-button\"\n\t\t\t\tonClick={ props.formatText }\n\t\t\t>\n\t\t\t\tFormat\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Settings;\n","import JsonInput from './JsonInput/';\nimport Settings from './Settings/';\nimport { useState } from 'react';\nimport './App.css';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n\nfunction App() {\n\n    let spaces = {\n        '1 spaced tab': 1,\n        '2 spaced tab': 2,\n        '3 spaced tab': 3,\n        '4 spaced tab': 4,\n        '1 tab spaced tab': '\\t',\n    }\n\n    let options = Object.keys(spaces);\n    let defaultOption = \"1 spaced tab\";\n\n    let [ inputText, setInputText ] = useState(\"\");\n    let [ option, setOption ] = useState(defaultOption);\n    let [ displayError, setDisplayError ] = useState(false);\n\n    function setExampleText() {\n        setDisplayError(false);\n        setInputText('{\"example\":{\"fruits\":[\"apple\",\"banana\",\"cherry\"]}}')\n    }\n\n    function clearText() {\n        setDisplayError(false);\n        setInputText(\"\");\n    }\n\n    function formatText() {\n        setDisplayError(false);\n        try {\n            let unformattedJSON = JSON.parse(inputText);\n            let formattedJSON = JSON.stringify(unformattedJSON, null, spaces[option]);\n            setInputText(formattedJSON);\n        }\n        catch (error) {\n            setDisplayError(true)\n        }\n    }\n\n    return (\n        <div className=\"app-container\">\n            <div className=\"title\">\n                JSON Formatter\n            </div>\n            <div className=\"settings-container\">\n                <Settings \n                    option={ option }\n                    setOption={ setOption }\n                    options={ options }\n                    formatText={ formatText }\n                />\n            </div>\n            <div className=\"json-input-container\">\n                <div className=\"instructions\">\n                    Paste a JSON below, or use an \n                    <div \n                        className=\"example\"\n                        onClick={ setExampleText }\n                    >\n                        example\n                    </div>\n                </div>\n                <JsonInput \n                    inputText={ inputText }\n                    setInputText={ setInputText }\n                />\n                {\n                    displayError &&\n                    <div\n                        className=\"error\"\n                    >\n                        Invalid JSON. Please enter a valid input.\n                    </div>\n                }\n                <div \n                    className=\"clear\"\n                    onClick={ clearText }\n                >\n                    <DeleteForeverIcon className=\"clear-icon\" /> Clear\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}